@using System.Data
@using System.Web
@using ZoomLa.Model
@using ZoomLa.BLL.SYS
@using ZoomLa.Common
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using ZoomLa.SQLDAL.SQL
@model ZoomLaCMS.Areas.Admin.Models.VM_Label
@functions{

}
@{
    B_Label labelBll = new B_Label();
    ////-------------------------
    string bread = "添加新标签";
    ViewBag.cateDT = new B_Label().GetLabelCateListXML();

    if (!string.IsNullOrEmpty(Model.labelMod.LabelName))
    {
        bread = "当前标签：<a href='" + Context.Request.RawUrl() + "'>" + Model.labelMod.LabelName + "</a>";
    }

}
@section head{
    <link rel="stylesheet" href="/Plugins/CodeMirror/lib/codemirror.css">
    <link rel="stylesheet" href="/Plugins/CodeMirror/theme/eclipse.css">
    <script src="/Plugins/CodeMirror/lib/codemirror.js"></script>
    <script src="/Plugins/CodeMirror/mode/xml.js"></script>
    <script src="/Plugins/CodeMirror/mode/javascript/javascript.js"></script>
    <script src="/Plugins/CodeMirror/addon/selection/active-line.js"></script>
    <script src="/Plugins/CodeMirror/addon/edit/matchbrackets.js"></script>
    <script src="/Plugins/CodeMirror/mode/htmlmixed.js"></script>
    <script src="/Plugins/CodeMirror/mode/css.js"></script>
    <script src="/Plugins/Third/bootstrap-select/js/bootstrap-select.js"></script>
    <link href="/Plugins/Third/bootstrap-select/css/bootstrap-select.css" rel="stylesheet" />
    <script></script>
    <style type="text/css">
        .opname { position: absolute; width: 100px; font-weight: bolder; }
        .field_wrap { width: 150px; display: inline-block; position: relative; border: 1px solid #ddd; border-right: none; }
        .editor { width: 100%; max-width: 100%; height: 530px; }
        #label_left { width: 420px; height: 536px; max-width: 450px; overflow-y: auto; padding: 0px; text-align: center; float: left; }
        #label_right { padding: 0px; margin-left: 425px; border-left: 1px solid #ddd; }
    </style>
    <title>标签管理</title>
}
@section content{
    <div id="BreadDiv" class="container-fluid mysite">
        <div class="row">
            <ol class="breadcrumb fixed-top w-100">
                <li class="breadcrumb-item"><a href="LabelManage">标签管理</a></li>
                <li class="breadcrumb-item">
                    @Html.Raw(bread)
                    <a href="../Config/DBTools/CreateTable">[添加新表]</a>
            </ol>
        </div>
    </div>
<input type="hidden" id="labelId_hid" value="@Model.labelMod.LabelID"/>
<form method="post" id="form1">
    <div style="display:none;">
        <input type="submit" ID="Save_Btn" name="Save_Btn" Text="保存" v-on:click="save();"/>
    </div>
    <input type="hidden" id="ds_hid" name="ds_hid"/>
    <div class="list_choice" id="app">
        @Html.Partial("LabelSql_0",Model)
        @Html.Partial("LabelSql_1",Model)
        @Html.Partial("LabelSql_2",Model)
        @Html.Partial("LabelSql_3",Model)
    </div>
</form>
}
@section script{
    <script src="/js/Plugs/base64.js"></script>
    <script src="/js/jquery.validate.min.js"></script>
    <script src="/js/Controls/ZL_Dialog.js"></script>
    <script src="/js/Controls/ZL_Array.js"></script>
    <script src="/Plugins/CodeMirror/LabelCall.js?v=12"></script>
    <script src="/dist/vue/vue.js"></script>
    <script src="/js/Modal/APIResult.js"></script>
    <script src="/js/jquery.form.js"></script>
    <script>
        //replaceDPToSelect('#TableList_DP,#TableList2_DP,#OnField_DP,#OnField2_DP');
        //replaceDPToSelect('#Order_Field_DP,#Where_Field_DP');
        var app = new Vue({
            el: "#app",
            methods: {
                //保存标签
                save: function () {
                    //检测各个参数是否正常填写
                    var ref = this;
                    $("#ds_hid").val(JSON.stringify(ref.model.DataSourceType));
                    //$("#form1").submit();
                    $("#form1").ajaxSubmit({
                        url: "@MVCHelper.GetAction("LabelSql_Save",Context.Request)", success: function (data) {
                            var model=APIResult.getModel(data);
                            if(APIResult.isok(model)){
                                var labelId=$("#labelId_hid").val();
                                if(labelId=="0"){alert("标签保存成功,即将返回列表页");location="LabelManage";}
                                else{ alert("标签修改成功");}
                               
                            }
                            else{alert("保存失败:"+model.retmsg);}
                        }
                    });
                },
                changeStep: function (step) {
                    this.step = step;
                    this.stepCallBack();
                },
                next: function () {
                    this.step++;
                    this.stepCallBack();
                },
                pre: function () {
                    this.step--;
                },
                stepCallBack: function () { 
                    if (this.step == "3" && this.step3_inited == false) {
                        setTimeout(function () { editor.setValue($("#textContent").val()); }, 100);
                        this.step3_inited = true;
                    }

                },
                cancel: function () {
                    if (!confirm("确定要退出编辑吗?")) { return false; }
                    location = "LabelManage";
                },
                //step1刷新字段列表
                updateField: function (flag) {
                    var ref = this;
                    var T1 = ref.model.DataSourceType.tb_m, T2 = ref.model.DataSourceType.tb_s;
                    var dsname = $("#DBList_DP").val();
                    var tbname = T1;
                    var fields = "fields1";
                    if (flag == "second") {
                        dsname = $("#DBList2_DP").val();
                        tbname = T2;
                        fields = "fields2";
                    }
                    if (ZL_Regex.isEmpty(dsname) || ZL_Regex.isEmpty(tbname)) { ref[fields] = [];  }
                    $.post("LabelSql_API?action=fields", { "dsname": dsname, "tbname": tbname }, function (data) {
                        var model = APIResult.getModel(data);
                        if (APIResult.isok(model)) {
                            ref[fields] = model.result;
                        }
                        else { console.error("fields", model.retmsg); }
                    });
                    //修改了选定的表,同时更正TaleSql与FieldSql
                    setTimeout(ref.updateTableSql,500);

                },
                //step1:表查询语句
                updateTableSql: function () {
                    var ref = this;
                    var sql = "";
                    var T1 = ref.model.DataSourceType.tb_m, T2 = ref.model.DataSourceType.tb_s;
                    if (ZL_Regex.isEmpty(T1)) { return sql; }
                    if (ZL_Regex.isEmpty(T2))//单表
                    {
                        sql = T1;
                    }
                    else {
                        var join = $("#SqlJoin_DP").val();
                        sql = T1 + " " + join + " " + T2;
                        sql += " ON " + T1 + "." + $("#OnField_DP").val() + "=" + T2 + "." + $("#OnField2_DP").val();
                    }
                    $("#SqlTable_T").val(sql);
                },
                //step1:
                updateFieldSql: function () { 
                    var ref = this;
                    //单表则不需要前缀,多表则加前缀
                    var fields = "";
                    var T1 = ref.model.DataSourceType.tb_m, T2 = ref.model.DataSourceType.tb_s;
                    var f1Arr = $("#FieldList_DP").val();
                    var f2Arr = $("#FieldList2_DP").val();
                    if (!ZL_Regex.isEmpty(T1)) {
                        var prefix = T1 + ".";
                        if (ZL_Regex.isEmpty(T2)) { prefix = ""; }
                        for (var i = 0; i < f1Arr.length; i++) {
                            fields += prefix + f1Arr[i] + ",";
                        }
                    }
                    if (!ZL_Regex.isEmpty(T2)) {
                        var prefix = T2 + ".";
                        if (ZL_Regex.isEmpty(T1)) { prefix = ""; }
                        for (var i = 0; i < f2Arr.length; i++) {
                            fields += prefix + f2Arr[i] + ",";
                        }
                    }
                    if (fields.length > 0) { fields = fields.substr(0, fields.length-1); }
                    if (ZL_Regex.isEmpty(fields)) { fields = "*"; }
                    $("#SqlField_T").val(fields);
                },
               //step2:
                updateWhereSql: function () {
                    var ref = this;
                    var T1 = ref.model.DataSourceType.tb_m, T2 = ref.model.DataSourceType.tb_s;
                    var tbname = $("#Order_Table_DP").val();
                    if (tbname == "1") { tbname = T1; } else { tbname = T2; }
                    //---------------------------------------------------
                    var sql = "";
                    if (!ZL_Regex.isEmpty($("#Where_T").val())) { sql += " " + $("#Where_Join_DP").val(); }
                    sql += " " + tbname + "." + $("#Where_Field_DP").val();
                    var whereVal = $("#Where_Value_T").val();
                    switch (parseInt($("#Where_OPCode_DP").val())) {
                        case 0:
                            sql += "=" + whereVal;
                            break;
                        case 1:
                            sql += ">" + whereVal;
                            break;
                        case 2:
                            sql += "<" + whereVal;
                            break;
                        case 3:
                            sql += ">=" + whereVal;
                            break;
                        case 4:
                            sql += "<=" + whereVal;
                            break;
                        case 5:
                            sql += "<>" + whereVal;
                            break;
                        case 6:
                            sql += " IN (" + whereVal + ")";
                            break;
                        case 7:
                            sql += " LIKE '%" + whereVal + "%'";
                            break;
                        case 8:
                            sql += " NOT IN (" + whereVal + ")";
                            break;
                    }
                    $("#Where_T").val(sql);
                },
                updateOrderSql: function () {
                    var ref = this;
                    var T1 = ref.model.DataSourceType.tb_m, T2 = ref.model.DataSourceType.tb_s;
                    var tbname = $("#Order_Table_DP").val();
                    if (tbname == "1") { tbname = T1; } else { tbname = T2; }
                    var sql = tbname + "." + $("#Order_Field_DP").val() + " " + $("#Order_DP").val();
                    $("#Order_T").val(sql);
                },
                init: function () {
                    var ref = this;
                    if (!ZL_Regex.isEmpty(ref.model.param)) {
                        ref.param.dt = ref.param.toDT(ref.model.param);
                    }
                    ref.model.DataSourceType = JSON.parse(ref.model.DataSourceType);
                    setTimeout(function () { 
                        ref.updateField("main");
                        ref.updateField("second");

                    },50);
                },
            },
            data: {
                step: 0,
                step3_inited: false,//初始化次编辑器
                //标签模型
                model: @Html.Raw(JsonConvert.SerializeObject(Model.labelMod)),
                //参数相关操作
                param: {
                    newMod: function () {
                        return { ParamName: "", ParamValue: "", ParamType: "1", ParamDesc: "", Param: "" };
                    },
                    add: function () {
                        var ref = this;
                        var model = ref.newMod();
                        ref.dt.push(model);
                    },
                    del: function (item) {
                        var ref = this;
                        for (var i = 0; i < ref.dt.length; i++) {
                            if (ref.dt[i] == item) { ref.dt.splice(i, 1);  }
                        }
                    },
                    //将参数字符串转换为json数组
                    toDT: function (paramStr) {
                        var ref = this;
                        var paramArr = paramStr.split('|');
                        var list = [];
                        for (var i = 0; i < paramArr.length; i++) {
                            var model = ref.newMod();
                            model.ParamName = paramArr[i].split(',')[0];
                            model.ParamValue = paramArr[i].split(',')[1];
                            model.ParamType = paramArr[i].split(',')[2];
                            model.ParamDesc = paramArr[i].split(',')[3];
                            model.Param = paramArr[i].split(',')[4];
                            list.push(model);
                        }
                        return list;
                    },
                    //用于保存
                    toStr: function () {
                        var ref = this;
                        var paramStr = "";

                    },
                    dt: [],
                },
                fields1: [],
                fields2: []
            }
        });
        app.init();
    </script>
    <script>
        //LabelCall调用
        var diag = new ZL_Dialog();
        function opentitle(url, title) {
            diag.url = url;
            diag.title = title;
            diag.ShowModal();
        }
        function closeCuModal() {
            diagLabel.CloseModal();
        }
        //新增Div参数块,拥有绑定功能
        function pdrag(ev) {
            var code = $(ev.target ? ev.target : ev.srcElement).attr("code");
            ev.dataTransfer.setData("Text", code);
        }
        function VoteCheck() {
            var validator = $("#form1").validate({ meta: "validate" });
            return validator.form();
        }
        function changecate(obj) {
            var $text = $("#LabelCate_T");
            $text.val($(obj).val());
        }
        function saveEditor() {
            labelEditor.save();
            return true;
        }
        var base64 = Base64;
        //===================================

        var labelEditor = {
            current: "Content_T",
            load: function (dom, id) {
                var ref = this;
                if (id == ref.current) {  }
                else { $("#" + ref.current).val(editor.getValue()); }
                $(dom).closest(".nav-tabs").find("a").removeClass("active");
                $(dom).addClass("active");
                //---------------------
                ref.current = id;
                $("#textContent").val($("#" + id).val());
                editor.setValue($("#" + id).val());
            },
            save: function () {
                var ref = this;
                $("#" + ref.current).val(editor.getValue());
            }
        };
    </script>
}